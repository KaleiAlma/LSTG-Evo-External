name: CMake on multiple platforms (base)

on:
  workflow_call:
    inputs:
      build:
        required: true
        type: string
      retention:
        required: false
        type: number
        default: 7
      sdl3:
        required: false
        type: boolean
        default: false
      sdl3-run-id:
        required: false
        type: number
        default: 0

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      LSTGEXT_MSVC:

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-22.04, windows-latest, macos-14]
        target_arch:
          - main: x86_64
            main_win: AMD64
            rev: westmere
            rev_win: SSE4.2
          - main: x86_64
            main_win: AMD64
            rev: haswell
            rev_win: AVX2
          - main: arm64
            main_win: ARM64
            rev: armv8.2-a
            rev_win: armv8.2
        exclude:
          - os: macos-14
            target_arch:
              rev_win: AVX2

    steps:
    - name: Configure Linux (arm)
      if: ${{ runner.os == 'Linux' && matrix.target_arch.main == 'arm64' }}
      run: |
        sudo dpkg --add-architecture arm64
        # sudo sed -i "/Components: /a Architectures: amd64" /etc/apt/sources.list.d/ubuntu.sources
        sudo sed -Ei 's/deb (\w)/deb [arch=amd64] \1/g' /etc/apt/sources.list
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy main restricted"                                | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates main restricted"                        | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy universe"                                       | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates universe"                               | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy multiverse"                                     | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-updates multiverse"                             | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-backports main restricted universe multiverse"  | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security main restricted"                       | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security universe"                              | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb [arch=arm64] http://ports.ubuntu.com/ubuntu-ports jammy-security multiverse"                            | sudo tee -a /etc/apt/sources.list > /dev/null
        sudo apt update
        sudo apt install \
          libssl-dev:arm64 gcc-10-aarch64-linux-gnu libstdc++-10-dev-arm64-cross binutils-aarch64-linux-gnu \
          libx11-dev:arm64 libwayland-dev:arm64 liblzma-dev:arm64 libzstd-dev:arm64
    - name: Configure Linux
      if: ${{ runner.os == 'Linux' }}
      run: |
        # sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
        echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-20 main"     | sudo tee -a /etc/apt/sources.list > /dev/null
        echo "deb-src http://apt.llvm.org/jammy/ llvm-toolchain-jammy-20 main" | sudo tee -a /etc/apt/sources.list > /dev/null
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo apt update
        sudo apt install cmake llvm-20 clang-20 lld-20 clang-tools-20 \
          ninja-build mesa-utils mesa-common-dev libxext-dev libasound2-dev \
          libpipewire-0.3-dev libaudio-dev libjack-dev libsndio-dev \
          libasound2-dev libpulse-dev libpulse-mainloop-glib0 libglib2.0-dev libxkbcommon-dev
    - name: Configure Windows
      if: ${{ runner.os == 'Windows' }}
      run: |
        Install-Module -Name VCVars -Confirm:$false -Force
        git config --system core.longpaths true
    # - name: Upgrade Windows LLVM
    #   if: ${{ runner.os == 'Windows' && inputs.build != 'zip' }}
    #   run: choco install llvm --version=20.1.8
    - name: Configure macOS
      if: ${{ runner.os == 'macOS' }}
      run: |
        brew install llvm@20 lld
        echo SDKROOT=$(xcrun --sdk macosx --show-sdk-path) >> $GITHUB_ENV

    - name: Checkout Repo
      uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Cache C++ packages
      id: cache-cpp
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build/cpm-cache
        key: ${{ runner.os }}-${{ matrix.target_arch.main }}-${{ matrix.target_arch.rev }}-${{ inputs.build }}-cpm-${{ hashFiles('**/') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target_arch.main }}-${{ matrix.target_arch.rev }}-${{ inputs.build }}-cpm-

    - name: Select MSVC if applicable
      if: ${{ runner.os == 'Windows' && (inputs.build == 'zip' || inputs.build == 'shader') }}
      run: echo "LSTGEXT_MSVC=-msvc" >> "$env:GITHUB_ENV"

    - name: Download previously-built SDL3 (shared)
      if: ${{ inputs.sdl3 }}
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/build/SDL3-shared
        name: lstgext-${{ runner.os }}-${{ matrix.target_arch.main }}-${{ matrix.target_arch.rev_win }}-shared-sdl3
        github-token: ${{ secrets.SDL3_CACHE }}
        run-id: ${{ inputs.sdl3-run-id || github.run_id }}

    - name: Download previously-built SDL3 (static)
      if: ${{ inputs.sdl3 }}
      uses: actions/download-artifact@v4
      with:
        path: ${{ github.workspace }}/build/SDL3-static
        name: lstgext-${{ runner.os }}-${{ matrix.target_arch.main }}-${{ matrix.target_arch.rev_win }}-static-sdl3
        github-token: ${{ secrets.SDL3_CACHE }}
        run-id: ${{ inputs.sdl3-run-id || github.run_id }}

    - name: Fix SDL3 paths
      if: ${{ inputs.sdl3 }}
      run: |
        mv ${{ github.workspace }}/build/SDL3-shared/lstgext/* ${{ github.workspace }}/build/SDL3-shared/
        mv ${{ github.workspace }}/build/SDL3-static/lstgext/* ${{ github.workspace }}/build/SDL3-static/

    # - name: Build DXC native
    #   if: ${{ runner.os == 'Windows' && matrix.target_arch.main == 'arm64' && inputs.build == 'shader' }}
    #   run: |
    #     setvc (vcvars)
    #     $b = "${{ github.workspace }}/build"
    #     $dxc = "$b/__deps/dxc-src"
    #     git clone --depth=1 --recurse-submodules --shallow-submodules -b v1.8.2502 https://github.com/microsoft/DirectXShaderCompiler $dxc
    #     cmake -S $dxc -B $b/NATIVE -C $dxc/cmake/caches/PredefinedParams.cmake -DCMAKE_BUILD_TYPE=Release -G Ninja
    #     cmake --build $b/NATIVE --target llvm-tblgen --config Release
    #     cmake --build $b/NATIVE --target clang-tblgen --config Release
    #     "TBLGEN_DIR=$b/NATIVE/bin/" >> "$env:GITHUB_ENV"

    - name: Set Windows VCVars
      if: ${{ runner.os == 'Windows' }}
      run: |
        (vcvars ${{ matrix.target_arch.main_win }}).GetEnumerator()
        | Foreach { "$($_.Key)=$($_.Value)" >> "$env:GITHUB_ENV" }

    - name: Configure CMake (Shared)
      run: >
        cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }}
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/toolchain/${{ runner.os }}-${{ matrix.target_arch.main }}${{ env.LSTGEXT_MSVC }}.cmake
        -DCMAKE_BUILD_TYPE=Release
        -DTARGET_ARCH_REV="${{ matrix.target_arch.rev }}"
        -DTARGET_ARCH_REV_WIN="${{ matrix.target_arch.rev_win }}"
        -DBUILD_SHARED_LIBS=ON
        -DLSTG_EXTERNAL_INSTALL_SUBDIR=shared/lstgext
        -DLSTGEXT_BUILD=${{ inputs.build }}
        -DCPM_SOURCE_CACHE=${{ github.workspace }}/build/cpm-cache
        ${{ inputs.sdl3 && '-DLSTGEXT_SDL3_DIR=SDL3-shared' || '' }}
        -G Ninja

    - name: Build With CMake (Shared)
      run: >
        cmake --build ${{ github.workspace }}/build --config Release --target external-build
        &&
        cmake --install ${{ github.workspace }}/build

    - name: Archive Shared
      id: archive-shared
      uses: actions/upload-artifact@v4
      with:
        name: lstgext-${{ runner.os }}-${{ matrix.target_arch.main }}-${{ matrix.target_arch.rev_win }}-shared-${{ inputs.build }}
        path: ${{ github.workspace }}/build/shared
        retention-days: ${{ inputs.retention }}

    - name: Configure CMake (Static)
      run: >
        cmake -B ${{ github.workspace }}/build -S ${{ github.workspace }}
        -USDL_SHARED
        -USDL_STATIC
        -UTRACY_STATIC
        -USPIRV_CROSS_SHARED
        -USPIRV_CROSS_STATIC
        -USDLSHADERCROSS_SPIRVCROSS_SHARED
        -USDLSHADERCROSS_SHARED
        -USDLSHADERCROSS_STATIC
        -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/cmake/toolchain/${{ runner.os }}-${{ matrix.target_arch.main }}${{ env.LSTGEXT_MSVC }}.cmake
        -DCMAKE_BUILD_TYPE=Release
        -DTARGET_ARCH_REV="${{ matrix.target_arch.rev }}"
        -DTARGET_ARCH_REV_WIN="${{ matrix.target_arch.rev_win }}"
        -DBUILD_SHARED_LIBS=OFF
        -DLSTG_EXTERNAL_INSTALL_SUBDIR=static/lstgext
        -DLSTGEXT_BUILD=${{ inputs.build }}
        -DCPM_SOURCE_CACHE=${{ github.workspace }}/build/cpm-cache
        ${{ inputs.sdl3 && '-DLSTGEXT_SDL3_DIR=SDL3-static' || '' }}
        -G Ninja

    - name: Build With CMake (Static)
      run: >
        cmake --build ${{ github.workspace }}/build --config Release --target external-build
        &&
        cmake --install ${{ github.workspace }}/build

    - name: Archive Static
      id: archive-static
      uses: actions/upload-artifact@v4
      with:
        name: lstgext-${{ runner.os }}-${{ matrix.target_arch.main }}-${{ matrix.target_arch.rev_win }}-static-${{ inputs.build }}
        path: ${{ github.workspace }}/build/static
        retention-days: ${{ inputs.retention }}

