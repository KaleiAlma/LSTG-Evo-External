name: CMake on multiple platforms

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false

      matrix:
        os: [ubuntu-24.04, windows-latest, macos-13, macos-14]
        build_type: [Release]

    steps:
    - run: echo ${{ runner.os }}

    - if: ${{ runner.os == 'Linux' }}
      run: sudo apt update && sudo apt install ninja-build mesa-utils mesa-common-dev libxext-dev libasound2-dev libsdl2-dev && sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)"
    - if: ${{ runner.os == 'Windows' }}
      run: choco install ninja
    - if: ${{ runner.os == 'macOS' }}
      run: brew install ninja llvm@18

    - uses: actions/checkout@v4
      with:
        submodules: 'recursive'

    - name: Cache C++ packages
      id: cache-cpp
      uses: actions/cache@v4
      with:
        path: ${{ github.workspace }}/build/cpm-cache
        key: ${{ matrix.os }}-cpm-${{ hashFiles('**/') }}
        restore-keys: |
          ${{ matrix.os }}-cpm-

    - name: Set reusable strings
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    - name: Configure and Build with CMake (Linux)
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=clang++-18
        -DCMAKE_C_COMPILER=clang-18
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCPM_SOURCE_CACHE=${{ steps.strings.outputs.build-output-dir }}/cpm-cache
        -G Ninja
        &&
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target ExternalZip
      if: ${{ runner.os == 'Linux' }}

    - name: Configure and Build with CMake (Windows)
      shell: cmd
      run: >
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat" &&
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=cl
        -DCMAKE_C_COMPILER=cl
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCPM_SOURCE_CACHE=${{ steps.strings.outputs.build-output-dir }}/cpm-cache
        -G Ninja
        &&
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target ExternalZip
      if: ${{ runner.os == 'Windows' }}

    - name: Configure and Build with CMake (macOS)
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_CXX_COMPILER=$(brew --prefix llvm@18)/bin/clang++
        -DCMAKE_C_COMPILER=$(brew --prefix llvm@18)/bin/clang
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}
        -DCPM_SOURCE_CACHE=${{ steps.strings.outputs.build-output-dir }}/cpm-cache
        -G Ninja
        &&
        cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }} --target ExternalZip
      if: ${{ runner.os == 'macOS' }}

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: external-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          ${{ steps.strings.outputs.build-output-dir }}/out/external
        retention-days: 7
