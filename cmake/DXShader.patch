diff --git a/external/DirectXShaderCompiler/CMakeLists.txt b/external/DirectXShaderCompiler/CMakeLists.txt
index 8f7db9978..c341fe245 100644
--- a/external/DirectXShaderCompiler/CMakeLists.txt
+++ b/external/DirectXShaderCompiler/CMakeLists.txt
@@ -113,14 +113,14 @@ if(NOT CMAKE_VERSION VERSION_LESS "3.13" AND MSVC AND NOT CMAKE_C_COMPILER_ARCHI
 endif()
 
 # enable control flow guard
-if(WIN32)
-  if(MSVC)
-    add_compile_options(/guard:cf)
-    add_link_options(/guard:cf)
-  else()
-    add_compile_options(-fcf-protection)
-  endif()
-endif(WIN32)
+# if(WIN32)
+#   if(MSVC)
+#     add_compile_options(/guard:cf)
+#     add_link_options(/guard:cf)
+#   else()
+#     add_compile_options(-fcf-protection)
+#   endif()
+# endif(WIN32)
 
 # Enable CET Shadow Stack
 if(MSVC AND NOT (CMAKE_C_COMPILER_ARCHITECTURE_ID MATCHES "ARM.*"))
diff --git a/external/DirectXShaderCompiler/cmake/modules/CrossCompile.cmake b/external/DirectXShaderCompiler/cmake/modules/CrossCompile.cmake
index 76a3078a5..e5f2f1431 100644
--- a/external/DirectXShaderCompiler/cmake/modules/CrossCompile.cmake
+++ b/external/DirectXShaderCompiler/cmake/modules/CrossCompile.cmake
@@ -1,4 +1,4 @@
-function(llvm_create_cross_target_internal target_name toochain buildtype)
+function(llvm_create_cross_target_internal target_name toolchain buildtype)
 
   if(NOT DEFINED LLVM_${target_name}_BUILD)
     set(LLVM_${target_name}_BUILD "${CMAKE_BINARY_DIR}/${target_name}")
@@ -16,11 +16,19 @@ function(llvm_create_cross_target_internal target_name toochain buildtype)
     COMMAND ${CMAKE_COMMAND} -E make_directory ${LLVM_${target_name}_BUILD}
     COMMENT "Creating ${LLVM_${target_name}_BUILD}...")
 
+  if (buildtype)
+    set(build_type_flags "-DCMAKE_BUILD_TYPE=${buildtype}")
+  endif()
+
   add_custom_command(OUTPUT ${LLVM_${target_name}_BUILD}/CMakeCache.txt
-    COMMAND ${CMAKE_COMMAND} -G "${CMAKE_GENERATOR}"
-        ${CROSS_TOOLCHAIN_FLAGS_${target_name}} ${CMAKE_SOURCE_DIR}
+    COMMAND ${CMAKE_COMMAND} -E "$ENV{VCVARS_NATIVE}"
+        ${CMAKE_COMMAND} ${build_type_flags}
+        -G "${CMAKE_GENERATOR}" -DLLVM_TARGETS_TO_BUILD=${LLVM_TARGETS_TO_BUILD}
+        -DLLVM_REQUIRES_EH=ON
+        ${CROSS_TOOLCHAIN_FLAGS_${target_name}} ${CMAKE_CURRENT_SOURCE_DIR}
     WORKING_DIRECTORY ${LLVM_${target_name}_BUILD}
     DEPENDS ${LLVM_${target_name}_BUILD}
+    COMMAND_EXPAND_LISTS
     COMMENT "Configuring ${target_name} LLVM...")
 
   add_custom_target(CONFIGURE_LLVM_${target_name}
@@ -29,22 +37,23 @@ function(llvm_create_cross_target_internal target_name toochain buildtype)
   set_directory_properties(PROPERTIES ADDITIONAL_MAKE_CLEAN_FILES
                                       ${LLVM_${target_name}_BUILD})
 
-  if(NOT IS_DIRECTORY ${LLVM_${target_name}_BUILD})
+  # if(NOT IS_DIRECTORY ${LLVM_${target_name}_BUILD})
     
 
-    message(STATUS "Configuring ${target_name} build...")
-    execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory
-      ${LLVM_${target_name}_BUILD} )
+  #   message(STATUS "Configuring ${target_name} build...")
+  #   execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory
+  #     ${LLVM_${target_name}_BUILD} )
 
-    message(STATUS "Configuring ${target_name} targets...")
-    if (buildtype)
-      set(build_type_flags "-DCMAKE_BUILD_TYPE=${buildtype}")
-    endif()
-    execute_process(COMMAND ${CMAKE_COMMAND} ${build_type_flags}
-        -G "${CMAKE_GENERATOR}" -DLLVM_TARGETS_TO_BUILD=${LLVM_TARGETS_TO_BUILD}
-        ${CROSS_TOOLCHAIN_FLAGS_${target_name}} ${CMAKE_SOURCE_DIR}
-      WORKING_DIRECTORY ${LLVM_${target_name}_BUILD} )
-  endif(NOT IS_DIRECTORY ${LLVM_${target_name}_BUILD})
+  #   message(STATUS "Configuring ${target_name} targets...")
+  #   if (buildtype)
+  #     set(build_type_flags "-DCMAKE_BUILD_TYPE=${buildtype}")
+  #   endif()
+  #   execute_process(COMMAND ${CMAKE_COMMAND} ${build_type_flags}
+  #       -G "${CMAKE_GENERATOR}" -DLLVM_TARGETS_TO_BUILD=${LLVM_TARGETS_TO_BUILD}
+  #       -DLLVM_REQUIRES_EH=ON
+  #       ${CROSS_TOOLCHAIN_FLAGS_${target_name}} ${CMAKE_CURRENT_SOURCE_DIR}
+  #     WORKING_DIRECTORY ${LLVM_${target_name}_BUILD} )
+  # endif(NOT IS_DIRECTORY ${LLVM_${target_name}_BUILD})
 
 endfunction()
 
